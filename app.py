from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
import PyPDF2
import docx
import io
import os
import json
import traceback
import requests

# -----------------------------
# Flask initialization
# -----------------------------
app = Flask(__name__)
CORS(app)

# -----------------------------
# API Configuration
# -----------------------------
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")

if not GEMINI_API_KEY:
    print("‚ö†Ô∏è  WARNING: GEMINI_API_KEY not found in environment variables")
if not OPENROUTER_API_KEY:
    print("‚ö†Ô∏è  WARNING: OPENROUTER_API_KEY not found in environment variables")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# -----------------------------
# Model selection
# -----------------------------
MODELS_TO_TRY = [
    "models/gemini-2.0-flash-exp",
    "models/gemini-1.5-flash",
    "models/gemini-1.5-pro",
]

def get_working_model():
    """Try to initialize the first working Gemini model"""
    for model_name in MODELS_TO_TRY:
        try:
            print(f"üîç Trying model: {model_name}")
            model = genai.GenerativeModel(model_name)
            response = model.generate_content("Hello")
            if response and response.text:
                print(f"‚úÖ Model initialized successfully: {model_name}")
                return model, model_name
        except Exception as e:
            print(f"‚ùå Failed with {model_name}: {str(e)}")
            continue
    return None, None

print("üöÄ Initializing Gemini model...")
model, active_model_name = get_working_model()
if model is None:
    print("‚ö†Ô∏è  WARNING: No working model found! Will retry on first request.")
    active_model_name = "not initialized"

# -----------------------------
# OpenRouter fallback
# -----------------------------
def ask_openrouter(prompt):
    """–ï—Å–ª–∏ Gemini –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º OpenRouter"""
    if not OPENROUTER_API_KEY:
        return "‚ùå –ù–µ—Ç OpenRouter API –∫–ª—é—á–∞!"
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
        }
        data = {
            "model": "google/gemini-2.0-flash-exp",
            "messages": [{"role": "user", "content": prompt}],
        }
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        if r.status_code == 200:
            return r.json()["choices"][0]["message"]["content"]
        else:
            return f"–û—à–∏–±–∫–∞ OpenRouter: {r.status_code} - {r.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {str(e)}"

# -----------------------------
# File parsing helpers
# -----------------------------
def extract_text_from_pdf(file_content):
    try:
        pdf_reader = PyPDF2.PdfReader(io.BytesIO(file_content))
        return "".join(page.extract_text() or "" for page in pdf_reader.pages)
    except Exception as e:
        print(f"Error extracting PDF: {e}")
        return ""

def extract_text_from_docx(file_content):
    try:
        doc = docx.Document(io.BytesIO(file_content))
        return "\n".join(p.text for p in doc.paragraphs)
    except Exception as e:
        print(f"Error extracting DOCX: {e}")
        return ""

# -----------------------------
# Routes
# -----------------------------
@app.route("/")
def home():
    return jsonify({
        "status": "ok",
        "message": "Resume Analyzer API is running!",
        "version": "6.0",
        "model": active_model_name,
        "api_key_set": "Yes" if GEMINI_API_KEY else "No",
        "openrouter_set": "Yes" if OPENROUTER_API_KEY else "No"
    })

@app.route("/analyze", methods=["POST"])
def analyze_resumes():
    global model, active_model_name
    try:
        # Ensure model is initialized
        if model is None:
            print("Model not initialized, retrying...")
            model, active_model_name = get_working_model()

        files = request.files.getlist("resumes")
        criteria = request.form.get("criteria", "")

        if not files:
            return jsonify({"error": "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}), 400

        print(f"üìÑ Received {len(files)} files for analysis")

        resumes_data = []
        for idx, file in enumerate(files):
            filename = file.filename
            content = file.read()
            text = ""

            if filename.lower().endswith(".pdf"):
                text = extract_text_from_pdf(content)
            elif filename.lower().endswith(".docx"):
                text = extract_text_from_docx(content)
            elif filename.lower().endswith(".txt"):
                text = content.decode("utf-8", errors="ignore")

            if text.strip():
                resumes_data.append({
                    "id": idx + 1,
                    "filename": filename,
                    "text": text[:8000]
                })
                print(f"‚úÖ Processed: {filename} ({len(text)} chars)")

        if not resumes_data:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤"}), 400

        if len(resumes_data) > 10:
            resumes_data = resumes_data[:10]
            print("‚ö†Ô∏è Limited to 10 resumes for stability")

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {len(resumes_data)} —Ä–µ–∑—é–º–µ –∏ –≤—ã–±–µ—Ä–∏ –¢–û–ü-5 –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê: {criteria if criteria else "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –Ω–∞–≤—ã–∫–∏"}

–†–ï–ó–Æ–ú–ï:
"""
        for resume in resumes_data:
            prompt += f"\n‚îÅ‚îÅ‚îÅ –†–ï–ó–Æ–ú–ï #{resume['id']}: {resume['filename']} ‚îÅ‚îÅ‚îÅ\n{resume['text']}\n"

        prompt += """
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ (–±–µ–∑ ```json –∏ –±–µ–∑ ```).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "summary": "–ö—Ä–∞—Ç–∫–∏–π –æ–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –≤—Å–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "top_candidates": [
    {
      "rank": 1,
      "resume_id": 1,
      "filename": "–∏–º—è —Ñ–∞–π–ª–∞",
      "candidate_name": "–§–ò–û –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ —Ä–µ–∑—é–º–µ)",
      "score": 95,
      "reasons": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç –≤—ã–±—Ä–∞–Ω (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)",
      "strengths": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 3"],
      "key_skills": ["–Ω–∞–≤—ã–∫ 1", "–Ω–∞–≤—ã–∫ 2", "–Ω–∞–≤—ã–∫ 3", "–Ω–∞–≤—ã–∫ 4"],
      "experience_years": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–ø—ã—Ç–∞",
      "education": "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
    }
  ]
}

–í—ã–±–µ—Ä–∏ –†–û–í–ù–û 5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ —Ä–µ–∑—é–º–µ –º–µ–Ω—å—à–µ 5).
"""

        print(f"ü§ñ Sending to {active_model_name}...")
        
        try:
            response = model.generate_content(prompt)
            result_text = response.text.strip()
            print(f"‚úÖ Received response from Gemini")
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini error: {str(e)}, trying OpenRouter...")
            result_text = ask_openrouter(prompt)

        # –û—á–∏—Å—Ç–∫–∞ markdown
        if result_text.startswith("```json"):
            result_text = result_text[7:]
        elif result_text.startswith("```"):
            result_text = result_text[3:]
        if result_text.endswith("```"):
            result_text = result_text[:-3]
        result_text = result_text.strip()

        print(f"üìù Response preview: {result_text[:200]}...")

        try:
            result = json.loads(result_text)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            if "top_candidates" not in result:
                result["top_candidates"] = []
            
            result["top_candidates"] = result["top_candidates"][:5]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            result["model_used"] = active_model_name
            
            print(f"‚úÖ Successfully parsed JSON with {len(result['top_candidates'])} candidates")
            return jsonify(result)
            
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON decode error: {str(e)}")
            print(f"Raw response: {result_text}")
            return jsonify({
                "error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI",
                "raw_response": result_text[:500],
                "note": "AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç"
            }), 500

    except Exception as e:
        print(f"üî• Critical error: {str(e)}")
        traceback.print_exc()
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/health", methods=["GET"])
def health():
    return jsonify({
        "status": "healthy",
        "model": active_model_name
    }), 200

# -----------------------------
# Run app
# -----------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üåê Starting server on port {port} (model: {active_model_name})")
    app.run(host="0.0.0.0", port=port, debug=False)
